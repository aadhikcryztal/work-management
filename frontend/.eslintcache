[{"C:\\squashapps\\frontend\\src\\index.js":"1","C:\\squashapps\\frontend\\src\\reportWebVitals.js":"2","C:\\squashapps\\frontend\\src\\App.js":"3","C:\\squashapps\\frontend\\src\\components\\dashboard\\dashboard.js":"4","C:\\squashapps\\frontend\\src\\components\\dashboard\\panels\\leftpanel.js":"5","C:\\squashapps\\frontend\\src\\components\\dashboard\\panels\\rightpanel.js":"6","C:\\squashapps\\frontend\\src\\components\\dashboard\\panels\\navigationpanel.js":"7","C:\\squashapps\\frontend\\src\\components\\dashboard\\panels\\announcementcard.js":"8","C:\\squashapps\\frontend\\src\\components\\login\\formcomponents\\emailverification.js":"9","C:\\squashapps\\frontend\\src\\components\\login\\landingpage.js":"10","C:\\squashapps\\frontend\\src\\components\\login\\navs\\landingnavigation.js":"11","C:\\squashapps\\frontend\\src\\components\\login\\formcomponents\\verificationcode.js":"12","C:\\squashapps\\frontend\\src\\components\\login\\formcomponents\\appsetup.js":"13","C:\\squashapps\\frontend\\src\\components\\login\\formcomponents\\passwordcreation.js":"14","C:\\squashapps\\frontend\\src\\components\\login\\formcomponents\\login.js":"15"},{"size":500,"mtime":499162500000,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":1211,"mtime":1609597696924,"results":"19","hashOfConfig":"17"},{"size":2383,"mtime":1609597749919,"results":"20","hashOfConfig":"17"},{"size":1307,"mtime":1609595359101,"results":"21","hashOfConfig":"17"},{"size":11047,"mtime":1609235463669,"results":"22","hashOfConfig":"17"},{"size":1355,"mtime":1609235480786,"results":"23","hashOfConfig":"17"},{"size":12666,"mtime":1609235530695,"results":"24","hashOfConfig":"17"},{"size":3097,"mtime":1609597943662,"results":"25","hashOfConfig":"17"},{"size":5254,"mtime":1609597933556,"results":"26","hashOfConfig":"17"},{"size":1112,"mtime":1609597730210,"results":"27","hashOfConfig":"17"},{"size":6089,"mtime":1609597951081,"results":"28","hashOfConfig":"17"},{"size":2727,"mtime":1609593243472,"results":"29","hashOfConfig":"17"},{"size":3457,"mtime":1609587077145,"results":"30","hashOfConfig":"17"},{"size":3747,"mtime":1609597846403,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1el3te",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\squashapps\\frontend\\src\\index.js",[],["64","65"],"C:\\squashapps\\frontend\\src\\reportWebVitals.js",[],"C:\\squashapps\\frontend\\src\\App.js",[],"C:\\squashapps\\frontend\\src\\components\\dashboard\\dashboard.js",[],"C:\\squashapps\\frontend\\src\\components\\dashboard\\panels\\leftpanel.js",[],"C:\\squashapps\\frontend\\src\\components\\dashboard\\panels\\rightpanel.js",[],"C:\\squashapps\\frontend\\src\\components\\dashboard\\panels\\navigationpanel.js",[],"C:\\squashapps\\frontend\\src\\components\\dashboard\\panels\\announcementcard.js",["66"],"import React, { Component } from \"react\";\r\nimport Moment from \"react-moment\";\r\nimport Axios from \"axios\";\r\nimport \"./css/announcementcard.css\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faCalendarAlt,\r\n  faComment,\r\n  faLocationArrow,\r\n  faTimes,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default class announcementcard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      category: \"Event\",\r\n      comment: \"\",\r\n      comments: [],\r\n      retriveAllComments: [],\r\n      commentsNumber: [],\r\n      viewedAnnouncement: {},\r\n      announcements: [],\r\n      statusMessage: { code: \"\", message: \"\" },\r\n      showmessage: false,\r\n      fullModeAnnouncement: true,\r\n    };\r\n  }\r\n  componentDidMount = () => {\r\n    this.setState({ announcements: this.props.announcementArray }, () => {\r\n      this.retrivingAllComments();\r\n    });\r\n  };\r\n\r\n  componentWillReceiveProps = (nextprops) => {\r\n    if (nextprops.announcementArray !== this.state.announcements)\r\n      this.setState({ announcements: nextprops.announcementArray }, () => {\r\n        this.retrivingAllComments();\r\n      });\r\n  };\r\n\r\n  getCommentNumbers = () => {\r\n    let commentsNumber = [];\r\n    this.state.announcements.forEach((announcement, index) => {\r\n      let count = 0;\r\n      this.state.retriveAllComments.forEach((comment, index) => {\r\n        if (announcement._id === comment.announcement_id) {\r\n          count += 1;\r\n        }\r\n      });\r\n      let newCount = { id: announcement._id, count: count };\r\n      commentsNumber.push(newCount);\r\n      this.setState({\r\n        commentsNumber,\r\n      });\r\n    });\r\n  };\r\n\r\n  viewAnnouncement = (selectedAnnouncement) => {\r\n    this.setState(\r\n      {\r\n        viewedAnnouncement: { ...selectedAnnouncement },\r\n        fullModeAnnouncement: false,\r\n      },\r\n      () => {\r\n        let partition_2 = document.querySelector(\"#partition-2\");\r\n        partition_2.style.display = \"flex\";\r\n        this.retrivingComments();\r\n      },\r\n    );\r\n  };\r\n\r\n  retrivingAllComments = async () => {\r\n    let response = await Axios.get(`/api/squashapps/retrivingallcomment/`);\r\n    this.setState(\r\n      {\r\n        retriveAllComments: response.data,\r\n      },\r\n      () => {\r\n        this.getCommentNumbers();\r\n      },\r\n    );\r\n  };\r\n\r\n  retrivingComments = async () => {\r\n    let stringId = String(this.state.viewedAnnouncement._id);\r\n    let response = await Axios.get(\r\n      `/api/squashapps/retrivingcomment/?id=${stringId}`,\r\n    );\r\n    this.setState(\r\n      {\r\n        comments: response.data,\r\n      },\r\n      () => {\r\n        this.retrivingAllComments();\r\n      },\r\n    );\r\n  };\r\n\r\n  sendComment = async () => {\r\n    let comment = this.state.comment;\r\n    let commentObject = {\r\n      id: this.state.viewedAnnouncement._id,\r\n      comments: comment,\r\n      dateSubmitted : new Date()\r\n    };\r\n    let response = await Axios.post(\r\n      \"/api/squashapps/createcomments\",\r\n      commentObject,\r\n    );\r\n    if (response.status === 200) {\r\n      this.setState({\r\n        statusMessage: {\r\n          code: 200,\r\n          message: \"comment created Successfully\",\r\n        },\r\n        showmessage: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        statusMessage: { code: 400, message: \"Error in submiting comments\" },\r\n        showmessage: true,\r\n      });\r\n    }\r\n    setTimeout(() => {\r\n      this.setState({\r\n        showmessage: false,\r\n        announcements: this.state.announcements,\r\n      });\r\n    }, 3000);\r\n    let commentField = document.querySelector(\".comment-input\");\r\n    commentField.value = \"\";\r\n    this.retrivingComments();\r\n  };\r\n\r\n  closePartition = () => {\r\n    this.setState({ fullModeAnnouncement: true });\r\n    let partition_2 = document.querySelector(\"#partition-2\");\r\n    partition_2.style.display = \"none\";\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Announcementcards flexAnnouncements\">\r\n        <div\r\n          className={\r\n            this.state.fullModeAnnouncement\r\n              ? \"Announcementcard-lists\"\r\n              : \"Announcementcard-lists partition-1\"\r\n          }\r\n        >\r\n          {this.state.announcements.map((singleAnnouncement, index) => (\r\n            <div className=\"Announcement-card\" key={index}>\r\n              <div className=\"Announcement-sender\">\r\n                <div\r\n                  className={\r\n                    singleAnnouncement.category === \"Announcement\"\r\n                      ? \"Announcement-sender-initial Announcement-category-1\"\r\n                      : singleAnnouncement.category === \"Event\"\r\n                      ? \"Announcement-sender-initial Announcement-category-2\"\r\n                      : \"Announcement-sender-initial Announcement-category-3\"\r\n                  }\r\n                >\r\n                  A\r\n                </div>\r\n              </div>\r\n              <div className=\"Announcement-details\">\r\n                <div className=\"Announcement-details-row1\">\r\n                  <div className=\"Announcement-title\">\r\n                    {singleAnnouncement.subject}\r\n                  </div>\r\n                  <div className=\"Announcement-mini-data\">\r\n                    <div\r\n                      className=\"Announcement-comment\"\r\n                      onClick={() => this.viewAnnouncement(singleAnnouncement)}\r\n                    >\r\n                      <FontAwesomeIcon icon={faComment} />\r\n                      {this.state.commentsNumber.map((commentNumber, index) => {\r\n                        if (singleAnnouncement._id === commentNumber.id)\r\n                          return (\r\n                            <span key={index} className=\"comment-number\">\r\n                              {commentNumber.count}\r\n                            </span>\r\n                          );\r\n                      })}\r\n                    </div>\r\n                    <div className=\"Announcement-createddate\">\r\n                      {\" \"}\r\n                      {singleAnnouncement.dateSubmitted ? (\r\n                        <Moment format=\"D MMM YYYY, h:mmA\">\r\n                          {singleAnnouncement.dateSubmitted}\r\n                        </Moment>\r\n                      ) : (\r\n                        \" 04 Feb, 2019, 3:35PM\"\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"Announcement-details-row2\">\r\n                  {singleAnnouncement.description}\r\n                </div>\r\n                {singleAnnouncement.category === \"Event\" ? (\r\n                  <div className=\"Announcement-details-row3\">\r\n                    <div className=\"Announcement-event-date\">\r\n                      <FontAwesomeIcon\r\n                        icon={faCalendarAlt}\r\n                        className=\"icon-events\"\r\n                      />{\" \"}\r\n                      <span className=\"icon-text\">\r\n                        {singleAnnouncement.time}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"Announcement-event-location\">\r\n                      <FontAwesomeIcon\r\n                        icon={faLocationArrow}\r\n                        className=\"icon-events\"\r\n                      />\r\n                      <span className=\"icon-text\">\r\n                        {singleAnnouncement.location}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"Announcementcard-view\" id=\"partition-2\">\r\n          {this.state.showmessage ? (\r\n            <div\r\n              className={\r\n                this.state.statusMessage.code === 200\r\n                  ? \"Rightpanel-form-card-message successmsg\"\r\n                  : \"Rightpanel-form-card-message errormsg\"\r\n              }\r\n            >\r\n              {this.state.statusMessage.message}\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <div className=\"Announcementcard-viewed\">\r\n            <div className=\"Announcementcard-commenteduser\">\r\n              <div className=\"Announcementcard-commenteduser-details\">\r\n                <div\r\n                  className={\r\n                    this.state.viewedAnnouncement.category === \"Announcement\"\r\n                      ? \"Announcement-viewed-comment-initial Announcement-category-1\"\r\n                      : this.state.viewedAnnouncement.category === \"Event\"\r\n                      ? \"Announcement-viewed-comment-initial Announcement-category-2\"\r\n                      : \"Announcement-viewed-comment-initial Announcement-category-3\"\r\n                  }\r\n                >\r\n                  A\r\n                </div>\r\n                <div className=\"Announcementcard-comment-user \">\r\n                  {this.state.viewedAnnouncement.subject}\r\n                </div>\r\n              </div>\r\n              <div className=\"Announcementcard-commented-comment-detail\">\r\n                <div className=\"Announcementcard-comment-time\">\r\n                  {this.state.viewedAnnouncement.dateSubmitted ? (\r\n                    <Moment format=\"D MMM YYYY, h:mmA\">\r\n                      {this.state.viewedAnnouncement.dateSubmitted}\r\n                    </Moment>\r\n                  ) : (\r\n                    \" 04 Feb, 2019, 3:35PM\"\r\n                  )}\r\n                </div>\r\n                <div\r\n                  className=\"Announcementcard-comment-close\"\r\n                  onClick={() => this.closePartition()}\r\n                >\r\n                  <FontAwesomeIcon icon={faTimes} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"Announcement-viewed-comment commented-top\">\r\n              {this.state.viewedAnnouncement.description}\r\n            </div>\r\n          </div>\r\n          <div className=\"Announcementcard-viewed-comments-title-section\">\r\n            <p className=\"Announcementcard-viewed-comments-title\">Comments</p>\r\n            <p className=\"Announcementcard-viewed-replies-count\">\r\n              {this.state.comments.length} replies\r\n            </p>\r\n          </div>\r\n          <div className=\"Announcementcard-viewed-comments\">\r\n            {this.state.comments.map((comment, index) => (\r\n              <div\r\n                className=\"Announcementcard-comment-card\"\r\n                style={{ gap: \"5px\" }}\r\n                key={index}\r\n              >\r\n                <div className=\"Announcementcard-commenteduser\">\r\n                  <div className=\"Announcementcard-commenteduser-details\">\r\n                    <div\r\n                      className={\r\n                        this.state.category === \"Announcement\"\r\n                          ? \"Announcement-viewed-comment-initial Announcement-category-1\"\r\n                          : this.state.category === \"Event\"\r\n                          ? \"Announcement-viewed-comment-initial Announcement-category-2\"\r\n                          : \"Announcement-viewed-comment-initial Announcement-category-3\"\r\n                      }\r\n                    >\r\n                      A\r\n                    </div>\r\n                    <div className=\"Announcementcard-comment-user\">\r\n                      Personal Documents\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"Announcementcard-commented-comment-detail\">\r\n                    <div className=\"Announcementcard-comment-time\">\r\n                      {comment.dateSubmitted ? (\r\n                        <Moment format=\"D MMM YYYY, h:mmA\">\r\n                          {comment.dateSubmitted}\r\n                        </Moment>\r\n                      ) : (\r\n                        \" 04 Feb, 2019, 3:35PM\"\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"Announcement-viewed-comment\">\r\n                  {comment.comments}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"Announcements-viewed-comment-write\">\r\n            <textarea\r\n              type=\"text\"\r\n              placeholder=\"Be a first comment\"\r\n              className=\"comment-input\"\r\n              onChange={(e) =>\r\n                this.setState({\r\n                  comment: e.target.value,\r\n                })\r\n              }\r\n            />\r\n            <FontAwesomeIcon\r\n              icon={faLocationArrow}\r\n              onClick={() => this.sendComment()}\r\n              className=\"icon-events comment-submit\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\squashapps\\frontend\\src\\components\\login\\formcomponents\\emailverification.js",[],"C:\\squashapps\\frontend\\src\\components\\login\\landingpage.js",[],"C:\\squashapps\\frontend\\src\\components\\login\\navs\\landingnavigation.js",[],"C:\\squashapps\\frontend\\src\\components\\login\\formcomponents\\verificationcode.js",[],"C:\\squashapps\\frontend\\src\\components\\login\\formcomponents\\appsetup.js",[],"C:\\squashapps\\frontend\\src\\components\\login\\formcomponents\\passwordcreation.js",[],"C:\\squashapps\\frontend\\src\\components\\login\\formcomponents\\login.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":178,"column":77,"nodeType":"73","messageId":"74","endLine":178,"endColumn":79},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]